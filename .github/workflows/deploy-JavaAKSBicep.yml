# This workflow performs the following:
# - Database configuration
# - Provisioning Azure Services  
# - Create the spring-petclinic-AKS App on Docker
# - Create an Azure Container Registry 
# - Push your app to the container registry
# - Create a Kubernetes Cluster on AKS 
# - Deploy the image to your Kubernetes cluster
# - Verify your container image
#
# Secrets required to be in place:
# - AZURE_CREDENTIALS

name: Build and Deploy Application
env:
  # This is the global resource prefix for this deployment
  # Use lower case letters and numbers only
  DEPLOYMENT_NAME: "petclinicaks"

  # Azure region to which the resources will be deployed
  DEPLOYMENT_REGION: "eastus"

on:
  # Triggers the workflow on push events on the main branch
  push:
    branches: [ main ]
    paths-ignore:
      - '*.md'
      - '*.png'

  # We also want to be able to run this manually from Github
  workflow_dispatch:
jobs:
  build-and-deploy:
     runs-on: ubuntu-latest
     steps:

     - name: 'Checkout GitHub Action'
       uses: actions/checkout@main
          
     - name: 'Login via Azure CLI'
       uses: azure/login@v1
       with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
            
     - name: Az CLI Create Resource Group
       uses: Azure/CLI@v1
       with:
        azcliversion: 2.30.0
        inlineScript: |
          az group create --name petclinicaksrg --location eastus
      
      # Deploy Bicep file
     - name: deploy
       uses: azure/arm-deploy@v1
       with:
        resourceGroupName: petclinicaksrg
        template: ./infra/aks-bicep/main.bicep
        parameters: ./infra/aks-bicep/parameters.json
       
      # Build Java Application
     - name: Build Java Application
       uses: actions/checkout@v3
     - name: Set up JDK 11
       uses: actions/setup-java@v3
       with:
          java-version: '11'
          distribution: 'adopt'
     - name: Build with Maven, compile and build the Docker image
       run: |
        cd ./App-Templates-Springboot-App-on-AKS
        mvn spring-boot:build-image

     # Azure Command Line - ACR Login
     - name: Azure CLI script
       uses: azure/CLI@v1
       with:
        azcliversion: 2.30.0
        inlineScript: |
          az acr login --name petclinicaksacr
    
     # Push to ACR
     - name: Docker - ACR
       uses: docker/build-push-action@v2
     - run: |
          docker tag docker.io/library/spring-petclinic:2.7.0-SNAPSHOT petclinicaksacr.azurecr.io/petclinic
          docker push petclinicaksacr.azurecr.io/petclinic
          
     # Azure Command Line - ACR AKS CLI
     - name: Azure CLI script
       uses: azure/CLI@v1
       with:
        azcliversion: 2.30.0
        inlineScript: |
          az aks install-cli
          az aks get-credentials --resource-group=petclinicaks-rg --name=aks-cluster
      
    # Deploy with kubectl
     - name: Azure Kubectl script
       uses: azure/setup-kubectl@v2.0
     - run: |
         kubectl run springpetclinicaks --image=petclinicaksacr.azurecr.io/petclinic:latest
         kubectl expose pod petclinic --type=LoadBalancer --port=80 --target-port=8080
         kubectl get services -o=jsonpath='{.items[*].status.loadBalancer.ingress[0].ip}'
